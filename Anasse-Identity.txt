//Pour utilisateurs :
//Authetification (identifiant et pass )
//Virement
//L’historique
//Solde
//Details du comptes
//Pour un admin :
//Ajouter un compte
//Supprimer un compte
//Recuperer les infos sur un compte
//Virement
//Depot
//Retrait 

///// AUTHENTIFICATION , CHIFFREMENT , SOLDE , AJOUT D'UN COMPTE POUR ADMIN:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Scanner;

public class ApplicationBancaire {

    private static HashMap<String, String> utilisateurs = new HashMap<>();
    private static HashMap<String, CompteBancaire> comptesUtilisateurs = new HashMap<>();
    private static HashMap<String, String> admins = new HashMap<>();

    public static void main(String[] args) {
        // Ajouter des utilisateurs et des comptes (vous pouvez remplacer par une base de données)
        String hashMotDePasseAlice = hashMotDePasse("motdepassealice");
        String hashMotDePasseBob = hashMotDePasse("motdepassebob");
        utilisateurs.put("alice", hashMotDePasseAlice);
        utilisateurs.put("bob", hashMotDePasseBob);
        comptesUtilisateurs.put("alice", new CompteBancaire(1000)); // Solde initial de 1000
        comptesUtilisateurs.put("bob", new CompteBancaire(500)); // Solde initial de 500

        // Ajouter des admins (vous pouvez remplacer par une base de données)
        String hashMotDePasseAdmin = hashMotDePasse("motdepasseadmin");
        admins.put("admin", hashMotDePasseAdmin);

        Scanner scanner = new Scanner(System.in);

        System.out.println("Bienvenue dans l'application bancaire !");
        System.out.print("Nom d'utilisateur : ");
        String nomUtilisateur = scanner.nextLine();
        System.out.print("Mot de passe : ");
        String motDePasse = scanner.nextLine();

        if (verifierUtilisateur(nomUtilisateur, hashMotDePasse(motDePasse))) {
            System.out.println("Authentification réussie !");
            if (estAdmin(nomUtilisateur)) {
                accederFonctionnalitesAdmin();
            } else {
                accederFonctionnalitesBancaires(nomUtilisateur);
            }
        } else {
            System.out.println("Nom d'utilisateur ou mot de passe incorrect.");
        }

        scanner.close();
    }

    public static boolean verifierUtilisateur(String nomUtilisateur, String motDePasseHash) {
        // Vérifier si l'utilisateur et le mot de passe correspondent
        if (utilisateurs.containsKey(nomUtilisateur)) {
            String motDePasseStocke = utilisateurs.get(nomUtilisateur);
            return motDePasseHash.equals(motDePasseStocke);
        }
        if (admins.containsKey(nomUtilisateur)) {
            String motDePasseAdmin = admins.get(nomUtilisateur);
            return motDePasseHash.equals(motDePasseAdmin);
        }
        return false;
    }

    public static boolean estAdmin(String nomUtilisateur) {
        return admins.containsKey(nomUtilisateur);
    }

    public static void accederFonctionnalitesBancaires(String nomUtilisateur) {
        CompteBancaire compte = comptesUtilisateurs.get(nomUtilisateur);
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nOpérations disponibles :");
            System.out.println("1. Consulter le solde");
            System.out.println("2. Effectuer un dépôt");
            System.out.println("3. Effectuer un retrait");
            System.out.println("4. Quitter");

            System.out.print("Choisissez une opération : ");
            int choix = scanner.nextInt();

            switch (choix) {
                case 1:
                    System.out.println("Solde actuel : " + compte.getSolde() + " €");
                    break;
                case 2:
                    System.out.print("Montant à déposer : ");
                    double montantDepot = scanner.nextDouble();
                    compte.deposer(montantDepot);
                    System.out.println("Dépôt effectué. Nouveau solde : " + compte.getSolde() + " €");
                    break;
                case 3:
                    System.out.print("Montant à retirer : ");
                    double montantRetrait = scanner.nextDouble();
                    if (compte.retirer(montantRetrait)) {
                        System.out.println("Retrait effectué. Nouveau solde : " + compte.getSolde() + " €");
                    } else {
                        System.out.println("Solde insuffisant pour effectuer le retrait.");
                    }
                    break;
                case 4:
                    System.out.println("Merci d'avoir utilisé l'application bancaire.");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    public static void accederFonctionnalitesAdmin() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nOpérations administratives disponibles :");
            System.out.println("1. Ajouter un utilisateur");
            System.out.println("2. Supprimer un utilisateur");
            System.out.println("3. Quitter");

            System.out.print("Choisissez une opération : ");
            int choix = scanner.nextInt();

            switch (choix) {
                case 1:
                    System.out.print("Nom d'utilisateur à ajouter : ");
                    String nouvelUtilisateur = scanner.next();
                    System.out.print("Mot de passe du nouvel utilisateur : ");
                    String nouveauMotDePasse = scanner.next();
                    utilisateurs.put(nouvelUtilisateur, hashMotDePasse(nouveauMotDePasse));
                    System.out.println("Utilisateur ajouté avec succès.");
                    break;
                case 2:
                    System.out.print("Nom d'utilisateur à supprimer : ");
                    String utilisateurASupprimer = scanner.next();
                    utilisateurs.remove(utilisateurASupprimer);
                    System.out.println("Utilisateur supprimé avec succès.");
                    break;
                case 3:
                    System.out.println("Merci d'avoir utilisé l'application bancaire en tant qu'administrateur.");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    public static String hashMotDePasse(String motDePasse) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(motDePasse.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                hexString.append(String.format("%02x", b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}

class CompteBancaire {
    private double solde;

    public CompteBancaire(double soldeInitial) {
        this.solde = soldeInitial;
    }

    public double getSolde() {
        return solde;
    }

    public void deposer(double montant) {
        solde += montant;
    }

    public boolean retirer(double montant) {
        if (montant <= solde) {
            solde -= montant;
            return true;
        }
        return false;
    }
}




//// HISTORIQUE 
import java.util.ArrayList;

public class CompteBancaire {
    private double solde;
    private ArrayList<String> historique;

    public CompteBancaire(double soldeInitial) {
        this.solde = soldeInitial;
        this.historique = new ArrayList<>();
    }

    public double getSolde() {
        return solde;
    }

    public void deposer(double montant) {
        solde += montant;
        historique.add("Dépôt de " + montant + " €");
    }

    public boolean retirer(double montant) {
        if (montant <= solde) {
            solde -= montant;
            historique.add("Retrait de " + montant + " €");
            return true;
        }
        return false;
    }

    public void afficherHistorique() {
        System.out.println("Historique des opérations :");
        for (String operation : historique) {
            System.out.println(operation);
        }
    }
}





///// AUTHENTIFICATION , CHIFFREMENT , SOLDE , AJOUT D'UN COMPTE POUR UN UTILISATEUR:

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Scanner;

public class ApplicationBancaire {

    private static HashMap<String, String> utilisateurs = new HashMap<>();
    private static HashMap<String, CompteBancaire> comptesUtilisateurs = new HashMap<>();

    public static void main(String[] args) {
        // Ajouter des utilisateurs et des comptes (vous pouvez remplacer par une base de données)
        String hashMotDePasseAlice = hashMotDePasse("motdepassealice");
        String hashMotDePasseBob = hashMotDePasse("motdepassebob");
        utilisateurs.put("alice", hashMotDePasseAlice);
        utilisateurs.put("bob", hashMotDePasseBob);
        comptesUtilisateurs.put("alice", new CompteBancaire(1000)); // Solde initial de 1000
        comptesUtilisateurs.put("bob", new CompteBancaire(500)); // Solde initial de 500

        Scanner scanner = new Scanner(System.in);

        System.out.println("Bienvenue dans l'application bancaire !");
        System.out.print("Nom d'utilisateur : ");
        String nomUtilisateur = scanner.nextLine();
        System.out.print("Mot de passe : ");
        String motDePasse = scanner.nextLine();

        if (verifierUtilisateur(nomUtilisateur, hashMotDePasse(motDePasse))) {
            System.out.println("Authentification réussie !");
            accederFonctionnalitesBancaires(nomUtilisateur);
        } else {
            System.out.println("Nom d'utilisateur ou mot de passe incorrect.");
        }

        scanner.close();
    }

    public static boolean verifierUtilisateur(String nomUtilisateur, String motDePasseHash) {
        // Vérifier si l'utilisateur et le mot de passe correspondent
        if (utilisateurs.containsKey(nomUtilisateur)) {
            String motDePasseStocke = utilisateurs.get(nomUtilisateur);
            return motDePasseHash.equals(motDePasseStocke);
        }
        return false;
    }

    public static void accederFonctionnalitesBancaires(String nomUtilisateur) {
        CompteBancaire compte = comptesUtilisateurs.get(nomUtilisateur);
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nOpérations disponibles :");
            System.out.println("1. Consulter le solde");
            System.out.println("2. Effectuer un dépôt");
            System.out.println("3. Effectuer un retrait");
            System.out.println("4. Effectuer un virement");
            System.out.println("5. Quitter");

            System.out.print("Choisissez une opération : ");
            int choix = scanner.nextInt();

            switch (choix) {
                case 1:
                    System.out.println("Solde actuel : " + compte.getSolde() + " €");
                    break;
                case 2:
                    System.out.print("Montant à déposer : ");
                    double montantDepot = scanner.nextDouble();
                    compte.deposer(montantDepot);
                    System.out.println("Dépôt effectué. Nouveau solde : " + compte.getSolde() + " €");
                    break;
                case 3:
                    System.out.println("Historique des opérations :");
                    compte.afficherHistorique();
                    break;
                case 4:
                    System.out.print("Montant à retirer : ");
                    double montantRetrait = scanner.nextDouble();
                    if (compte.retirer(montantRetrait)) {
                        System.out.println("Retrait effectué. Nouveau solde : " + compte.getSolde() + " €");
                    } else {
                        System.out.println("Solde insuffisant pour effectuer le retrait.");
                    }
                    break;
                case 5:
                    System.out.print("Nom d'utilisateur du bénéficiaire : ");
                    String beneficiaire = scanner.next();
                    System.out.print("Montant à transférer : ");
                    double montantTransfert = scanner.nextDouble();
                    if (virement(nomUtilisateur, beneficiaire, montantTransfert)) {
                        System.out.println("Virement effectué avec succès.");
                    } else {
                        System.out.println("Le virement a échoué. Vérifiez les informations.");
                    }
                    break;
                case 5:
                    System.out.println("Merci d'avoir utilisé l'application bancaire.");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    public static boolean virement(String expediteur, String beneficiaire, double montant) {
        if (comptesUtilisateurs.containsKey(expediteur) && comptesUtilisateurs.containsKey(beneficiaire)) {
            CompteBancaire compteExpediteur = comptesUtilisateurs.get(expediteur);
            CompteBancaire compteBeneficiaire = comptesUtilisateurs.get(beneficiaire);
            if (compteExpediteur.retirer(montant)) {
                compteBeneficiaire.deposer(montant);
                return true;
            }
        }
        return false;
    }

    public static String hashMotDePasse(String motDePasse) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(motDePasse.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                hexString.append(String.format("%02x", b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}

class CompteBancaire {
    private double solde;

    public CompteBancaire(double soldeInitial) {
        this.solde = soldeInitial;
    }

    public double getSolde() {
        return solde;
    }

    public void deposer(double montant) {
        solde += montant;
    }

    public boolean retirer(double montant) {
        if (montant <= solde) {
            solde -= montant;
            return true;
        }
        return false;
    }
}


///
